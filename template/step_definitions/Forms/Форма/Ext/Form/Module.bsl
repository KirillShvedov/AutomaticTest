
///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////
#Область Служебные_функции_и_процедуры

&НаКлиенте
// контекст фреймворка Vanessa-ADD
Перем Ванесса;

&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;

&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-ADD.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;

	ВсеТесты = Новый Массив;
	Возврат ВсеТесты;
КонецФункции

&НаКлиенте
Функция ПолучитьМакетОбработки(ИмяФайла) Экспорт
	ИмяФайлаОбработки 	= ИспользуемоеИмяФайла();
	КаталогОбработки 	= Лев(ИмяФайлаОбработки,СтрНайти(ИмяФайлаОбработки,"\step_definitions\"));
	ИмяФайлаМакета 		= "";
	Если Лев(ИмяФайла,2) = ".\" Тогда
		ИмяФайлаМакета 	= КаталогОбработки + "ИсходныеДанные\" + Прав(ИмяФайла,СтрДлина(ИмяФайла)-2);
	Иначе
		ИмяФайлаМакета 	= КаталогОбработки + "ИсходныеДанные\" + ИмяФайла;
	КонецЕсли;
	
	Файл 				= Новый Файл(ИмяФайлаМакета);
	Если Не Файл.Существует() Тогда
		ТекстовыйДокумент	= Новый ТекстовыйДокумент;
		ТекстовыйДокумент.ДобавитьСтроку("Ой что то пошло не так");
		Возврат ТекстовыйДокумент;
	КонецЕсли;

	ЭтоТабличныйДокумент  = Ложь;
	Если СтрЗаканчиваетсяНа(ИмяФайлаМакета,".mxl") Тогда
		ЭтоТабличныйДокумент = Истина;
	ИначеЕсли НЕ СтрЗаканчиваетсяНа(ИмяФайлаМакета,".json") Тогда
		ИмяФайлаМакета 	= ИмяФайлаМакета + ".json";
	КонецЕсли;
	
	ДвоичныеДанные 		= Новый ДвоичныеДанные(ИмяФайлаМакета);
	АдресХранилища 		= ПоместитьВоВременноеХранилище(ДвоичныеДанные,ЭтаФорма.УникальныйИдентификатор);
	
	Возврат ПолучитьМакетСервер(АдресХранилища, ЭтоТабличныйДокумент);	 	
КонецФункции

&НаСервере
Функция ИспользуемоеИмяФайла()
	Возврат РеквизитФормыВЗначение("Объект").ИспользуемоеИмяФайла;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМакетСервер(АдресХранилища, ЭтоТабличныйДокумент)
	Если ЭтоТабличныйДокумент Тогда
		ИмяФайла 			= ПолучитьИмяВременногоФайла(".mxl");
	Иначе
		ИмяФайла 			= ПолучитьИмяВременногоФайла(".json");
	КонецЕсли;
	ДвоичныеДанные 			= ПолучитьИзВременногоХранилища(АдресХранилища);
	ДвоичныеДанные.Записать(ИмяФайла);
	Если ЭтоТабличныйДокумент Тогда
		ТекстовыйДокумента  	= Новый ТабличныйДокумент;
		ТекстовыйДокумента.Прочитать(ИмяФайла);
	Иначе
		ТекстовыйДокумента  	= Новый ТекстовыйДокумент;
		ТекстовыйДокумента.Прочитать(ИмяФайла);
	КонецЕсли;
	Возврат ТекстовыйДокумента;	
КонецФункции

#КонецОбласти



#Область Работа_со_сценариями

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
А = 0;
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	ЗакрытьTESTCLIENT();
	ПередОкончаниемСценарияСервер(); 	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьTESTCLIENT()

	Попытка
		КонтекстСохраняемый.ГлавноеОкноТестируемого.Закрыть();
		КонтекстСохраняемый.ГлавноеОкноТестируемого = Неопределено;
	Исключение 		
	КонецПопытки;	

	// Закрытие платформенного-бспшного окна "Завершить работу"
	Попытка
		ИскомаяКнопка = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"), "Завершить работу");
		Если ИскомаяКнопка <> Неопределено Тогда
			ИскомаяКнопка.Нажать();
			ИскомаяКнопка = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),"Завершить работу");
			Пока ИскомаяКнопка <> Неопределено Цикл
				Если НЕ ИскомаяКнопка.ТекстЗаголовка = "OK" 
					И НЕ ИскомаяКнопка.ТекстЗаголовка = "Завершить работу" Тогда
					КонтекстСохраняемый.ГлавноеОкноТестируемого.Закрыть();
					ИскомаяКнопка = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),"Завершить работу");
					Продолжить;
				КонецЕсли;  				
				ИскомаяКнопка.Нажать();
				ИскомаяКнопка = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"));
			КонецЦикла;
		Иначе
			ИскомаяКнопка = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"));
			Пока ИскомаяКнопка <> Неопределено Цикл
				Если НЕ ИскомаяКнопка.ТекстЗаголовка = "OK" 
					И НЕ ИскомаяКнопка.ТекстЗаголовка = "Завершить работу" Тогда
					КонтекстСохраняемый.ГлавноеОкноТестируемого.Закрыть();
					ИскомаяКнопка = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),"Завершить работу");
					Продолжить;
				КонецЕсли;  				
				ИскомаяКнопка.Нажать();
				ИскомаяКнопка = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"));
			КонецЦикла;
		КонецЕсли;
	Исключение // TODO полностью скрываем исключение ??
		
	КонецПопытки;
	
	КонтекстСохраняемый.Вставить("ГлавноеОкноТестируемого",Неопределено);
	
	Попытка
		КонтекстСохраняемый.ТестовоеПриложение.РазорватьСоединение();
	Исключение // TODO полностью скрываем исключение ??
		//
	КонецПопытки;

	КонтекстСохраняемый.Вставить("ТестовоеПриложение",Неопределено);

	Если КонтекстСохраняемый.Свойство("ПодключенныеTestClient") Тогда
		ПодключенныеTestClient = КонтекстСохраняемый.ПодключенныеTestClient;
		УдалитьЭлементПодключенныеTestClient(ПодключенныеTestClient,КонтекстСохраняемый.ТекущийПрофильTestClient);
	КонецЕсли;

	// снимем флаг подключения в таблице TestClient
	Для каждого СтрокаПодключения Из Ванесса.ДанныеКлиентовТестирования Цикл
		СтрокаПодключения.Подключен = Ложь;
	КонецЦикла;


КонецПроцедуры

&НаКлиенте
Процедура УдалитьЭлементПодключенныеTestClient(ПодключенныеTestClient,ИмяTestClient,Синоним = Неопределено)
	Если ПодключенныеTestClient = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Для Ккк = 0 По ПодключенныеTestClient.Количество()-1 Цикл
		Если ПодключенныеTestClient[Ккк].Имя = ИмяTestClient Тогда
			Синоним = ПодключенныеTestClient[Ккк].Синоним;
			ПодключенныеTestClient.Удалить(Ккк);
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПередОкончаниемСценарияСервер() 
	Попытка
		УстановитьМонопольныйРежим(Истина);
		УдалитьДанныеИнформационнойБазы();
		УстановитьМонопольныйРежим(Ложь);
	Исключение
	КонецПопытки;
КонецПроцедуры

#КонецОбласти
